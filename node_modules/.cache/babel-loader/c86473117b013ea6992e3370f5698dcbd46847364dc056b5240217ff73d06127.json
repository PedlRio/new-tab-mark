{"ast":null,"code":"import { defineComponent } from 'vue';\nimport { Editor, EditorContent } from '@tiptap/vue-2';\nimport Document from '@tiptap/extension-document';\nimport Placeholder from '@tiptap/extension-placeholder';\nimport Heading from '@tiptap/extension-heading';\nimport StarterKit from '@tiptap/starter-kit';\nimport Typography from '@tiptap/extension-typography';\nimport Highlight from '@tiptap/extension-highlight';\nimport TaskItem from '@tiptap/extension-task-item';\nimport TaskList from '@tiptap/extension-task-list';\nimport FileHandler from '@tiptap-pro/extension-file-handler';\nimport Link from '@tiptap/extension-link';\nimport Image from '@tiptap/extension-image';\nimport CodeBlock from '@tiptap/extension-code-block';\nconst CustomDocument = Document.extend({\n  content: 'heading block*'\n});\nexport default defineComponent({\n  components: {\n    EditorContent\n  },\n  data() {\n    return {\n      editor: null,\n      isFirstHeadingEditing: false\n    };\n  },\n  mounted() {\n    this.initializeEditor();\n    this.loadContent();\n  },\n  methods: {\n    initializeEditor(ids) {\n      this.editor = new Editor({\n        extensions: [CustomDocument, StarterKit.configure({\n          document: false,\n          heading: false\n        }), Heading.configure({\n          HTMLAttributes: {\n            class: 'first-heading'\n          }\n        }), Placeholder.configure({\n          placeholder: ({\n            node\n          }) => {\n            if (node.type.name === 'heading') {\n              return 'What’s the title?';\n            }\n            return 'Can you add some further context?';\n          }\n        }), Typography, Highlight, TaskItem, TaskList, Link, CodeBlock, Image.configure({\n          inline: true,\n          allowBase64: true\n        }), FileHandler.configure({\n          allowedMimeTypes: ['image/png', 'image/jpeg', 'image/gif', 'image/webp'],\n          onDrop: (currentEditor, files, pos) => {\n            files.forEach(file => {\n              const fileReader = new FileReader();\n              fileReader.readAsDataURL(file);\n              fileReader.onload = () => {\n                currentEditor.chain().insertContentAt(pos, {\n                  type: 'image',\n                  attrs: {\n                    src: fileReader.result\n                  }\n                }).focus().run();\n              };\n            });\n          },\n          onPaste: (currentEditor, files) => {\n            files.forEach(file => {\n              const fileReader = new FileReader();\n              fileReader.readAsDataURL(file);\n              fileReader.onload = () => {\n                currentEditor.chain().insertContentAt(currentEditor.state.selection.anchor, {\n                  type: 'image',\n                  attrs: {\n                    src: fileReader.result\n                  }\n                }).focus().run();\n              };\n            });\n          }\n        })],\n        editorProps: {\n          attributes: {\n            class: 'markdown-body prose dark:prose-invert prose-sm sm:prose-base lg:prose-lg xl:prose-2xl m-5 focus:outline-none'\n          }\n        },\n        content: localStorage.getItem('editorContent') || `\n          <h1>\n            What’s the title?\n          </h1>\n          <p></p>\n          <p></p>\n          <p></p>\n          <p></p>\n          <p></p>\n        `,\n        onBlur: () => this.saveContent()\n      });\n    },\n    saveContent() {\n      const heading = this.editor.view.dom.querySelector('h1');\n      const content = this.editor.getHTML();\n      localStorage.setItem('editorContent', content);\n      this.$emit('notaAtualizada', content, heading);\n    },\n    loadContent() {\n      const savedContent = localStorage.getItem('editorContent');\n      if (savedContent) {\n        this.editor.commands.setContent(savedContent);\n      }\n    },\n    loadNoteContent(nota) {\n      this.editor.commands.setContent(nota.content);\n      localStorage.setItem('editorContent', nota.content);\n      console.log(nota.title);\n      if (nota.length === 0) {\n        localStorage.removeItem('editorContent');\n      }\n    }\n  },\n  beforeUnmount() {\n    this.editor.destroy();\n  }\n});","map":{"version":3,"names":["defineComponent","Editor","EditorContent","Document","Placeholder","Heading","StarterKit","Typography","Highlight","TaskItem","TaskList","FileHandler","Link","Image","CodeBlock","CustomDocument","extend","content","components","data","editor","isFirstHeadingEditing","mounted","initializeEditor","loadContent","methods","ids","extensions","configure","document","heading","HTMLAttributes","class","placeholder","node","type","name","inline","allowBase64","allowedMimeTypes","onDrop","currentEditor","files","pos","forEach","file","fileReader","FileReader","readAsDataURL","onload","chain","insertContentAt","attrs","src","result","focus","run","onPaste","state","selection","anchor","editorProps","attributes","localStorage","getItem","onBlur","saveContent","view","dom","querySelector","getHTML","setItem","$emit","savedContent","commands","setContent","loadNoteContent","nota","console","log","title","length","removeItem","beforeUnmount","destroy"],"sources":["src/components/tiptap.vue"],"sourcesContent":["<template>\n    <editor-content :editor=\"editor\" class=\"editor\"/>\n</template>\n\n<script>\nimport { defineComponent } from 'vue'\nimport { Editor, EditorContent } from '@tiptap/vue-2'\nimport Document from '@tiptap/extension-document'\nimport Placeholder from '@tiptap/extension-placeholder'\nimport Heading from '@tiptap/extension-heading'\nimport StarterKit from '@tiptap/starter-kit'\nimport Typography from '@tiptap/extension-typography'\nimport Highlight from '@tiptap/extension-highlight'\nimport TaskItem from '@tiptap/extension-task-item'\nimport TaskList from '@tiptap/extension-task-list'\nimport FileHandler from '@tiptap-pro/extension-file-handler'\nimport Link from '@tiptap/extension-link'\nimport Image from '@tiptap/extension-image'\nimport CodeBlock from '@tiptap/extension-code-block'\n\nconst CustomDocument = Document.extend({\n  content: 'heading block*'\n})\n\nexport default defineComponent({\n  components: {\n    EditorContent\n  },\n\n  data () {\n    return {\n      editor: null,\n      isFirstHeadingEditing: false\n    }\n  },\n\n  mounted () {\n    this.initializeEditor()\n    this.loadContent()\n  },\n\n  methods: {\n    initializeEditor (ids) {\n      this.editor = new Editor({\n        extensions: [\n          CustomDocument,\n          StarterKit.configure({\n            document: false,\n            heading: false\n          }),\n          Heading.configure({\n            HTMLAttributes: {\n              class: 'first-heading'\n            }\n          }),\n          Placeholder.configure({\n            placeholder: ({ node }) => {\n              if (node.type.name === 'heading') {\n                return 'What’s the title?'\n              }\n\n              return 'Can you add some further context?'\n            }\n          }),\n          Typography,\n          Highlight,\n          TaskItem,\n          TaskList,\n          Link,\n          CodeBlock,\n          Image.configure({\n            inline: true,\n            allowBase64: true\n          }),\n          FileHandler.configure({\n            allowedMimeTypes: ['image/png', 'image/jpeg', 'image/gif', 'image/webp'],\n            onDrop: (currentEditor, files, pos) => {\n              files.forEach(file => {\n                const fileReader = new FileReader()\n                fileReader.readAsDataURL(file)\n                fileReader.onload = () => {\n                  currentEditor.chain().insertContentAt(pos, {\n                    type: 'image',\n                    attrs: {\n                      src: fileReader.result\n                    }\n                  }).focus().run()\n                }\n              })\n            },\n            onPaste: (currentEditor, files) => {\n              files.forEach(file => {\n                const fileReader = new FileReader()\n                fileReader.readAsDataURL(file)\n                fileReader.onload = () => {\n                  currentEditor.chain().insertContentAt(currentEditor.state.selection.anchor, {\n                    type: 'image',\n                    attrs: {\n                      src: fileReader.result\n                    }\n                  }).focus().run()\n                }\n              })\n            }\n          })\n        ],\n        editorProps: {\n          attributes: {\n            class: 'markdown-body prose dark:prose-invert prose-sm sm:prose-base lg:prose-lg xl:prose-2xl m-5 focus:outline-none'\n          }\n        },\n        content: localStorage.getItem('editorContent') || `\n          <h1>\n            What’s the title?\n          </h1>\n          <p></p>\n          <p></p>\n          <p></p>\n          <p></p>\n          <p></p>\n        `,\n        onBlur: () => this.saveContent()\n      })\n    },\n\n    saveContent () {\n      const heading = this.editor.view.dom.querySelector('h1')\n      const content = this.editor.getHTML()\n      localStorage.setItem('editorContent', content)\n      this.$emit('notaAtualizada', content, heading)\n    },\n\n    loadContent () {\n      const savedContent = localStorage.getItem('editorContent')\n      if (savedContent) {\n        this.editor.commands.setContent(savedContent)\n      }\n    },\n    loadNoteContent (nota) {\n      this.editor.commands.setContent(nota.content)\n      localStorage.setItem('editorContent', nota.content)\n      console.log(nota.title)\n      if (nota.length === 0) {\n        localStorage.removeItem('editorContent')\n      }\n    }\n  },\n\n  beforeUnmount () {\n    this.editor.destroy()\n  }\n})\n</script>\n\n<style lang=\"scss\">\n/* Basic editor styles */\n.ProseMirror {\n  > * + * {\n    margin-top: 0.75em;\n  }\n}\n/* Basic editor styles */\n.tiptap {\n  > * + * {\n    margin-top: 0.75em;\n  }\n}\n\n/* Placeholder (at the top) */\n/*.tiptap p.is-editor-empty:first-child::before {\n  content: attr(data-placeholder);\n  float: left;\n  color: #ced4da;\n  pointer-events: none;\n  height: 0;\n}*/\n\n/* Placeholder (on every new line) */\n.tiptap .is-empty::before {\n  content: attr(data-placeholder);\n  float: left;\n  color: #ced4da7b;\n  pointer-events: none;\n  height: 0;\n  font-style: italic;\n}\n\nul[data-type=\"taskList\"] {\n  list-style: none;\n  padding: 0;\n\n  p {\n    margin: 0;\n  }\n\n  li {\n    display: flex;\n\n    > label {\n      flex: 0 0 auto;\n      margin-right: 0.5rem;\n      user-select: none;\n    }\n\n    > div {\n      flex: 1 1 auto;\n    }\n\n    ul li,\n    ol li {\n      display: list-item;\n    }\n\n    ul[data-type=\"taskList\"] > li {\n      display: flex;\n    }\n  }\n}\n#app {\n    display: flex;\n    flex-wrap: nowrap;\n    justify-content: center;\n}\n\n.sidebar {\n    flex: 0 0 25%; /* Define a largura do sidebar para 25% */\n    background-color: #494949; /* Cor de fundo opcional */\n}\n\n.editor {\n    flex: 0 0 75%; /* Define a largura do editor para 75% */\n}\n\n/* Media query para tornar o layout responsivo em dispositivos menores */\n@media screen and (max-width: 768px) {\n    #app {\n        flex-direction: column; /* Empilha os elementos verticalmente */\n    }\n\n    .sidebar,\n    .editor {\n        flex: 1 1 100%; /* Ocupa a largura total em dispositivos menores */\n    }\n}\n\nbody{\n  background-color: #0d1117;\n  margin: 0;\n}\n\n.markdown-body {\n  min-width: 200px;\n  max-width: 980px;\n  padding: 45px;\n  margin: 0 auto;\n  &:focus-visible{\n    outline: none;\n  }\n}\n\n@media (max-width: 767px) {\n  .markdown-body {\n    padding: 15px;\n  }\n}\n\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}