{"ast":null,"code":"import { defineComponent } from 'vue';\nimport { Editor, EditorContent } from '@tiptap/vue-2';\nimport Document from '@tiptap/extension-document';\nimport Placeholder from '@tiptap/extension-placeholder';\nimport Heading from '@tiptap/extension-heading';\nimport StarterKit from '@tiptap/starter-kit';\nimport Typography from '@tiptap/extension-typography';\nimport Highlight from '@tiptap/extension-highlight';\nimport TaskItem from '@tiptap/extension-task-item';\nimport TaskList from '@tiptap/extension-task-list';\nimport FileHandler from '@tiptap-pro/extension-file-handler';\nimport Link from '@tiptap/extension-link';\nimport Image from '@tiptap/extension-image';\nconst CustomDocument = Document.extend({\n  content: 'heading block*'\n});\nexport default defineComponent({\n  components: {\n    EditorContent\n  },\n  data() {\n    return {\n      editor: null,\n      isFirstHeadingEditing: false\n    };\n  },\n  mounted() {\n    this.initializeEditor();\n    this.loadContent();\n  },\n  methods: {\n    initializeEditor(ids) {\n      this.editor = new Editor({\n        extensions: [CustomDocument, StarterKit.configure({\n          document: false,\n          heading: false\n        }), Heading.configure({\n          HTMLAttributes: {\n            class: 'first-heading'\n          }\n        }), Placeholder.configure({\n          placeholder: ({\n            node\n          }) => {\n            if (node.type.name === 'heading') {\n              return 'What’s the title?';\n            }\n            return 'Can you add some further context?';\n          }\n        }), Typography, Highlight, TaskItem, TaskList, Link, Image.configure({\n          inline: true,\n          allowBase64: true\n        }), FileHandler.configure({\n          allowedMimeTypes: ['image/png', 'image/jpeg', 'image/gif', 'image/webp'],\n          onDrop: (currentEditor, files, pos) => {\n            files.forEach(file => {\n              const fileReader = new FileReader();\n              fileReader.readAsDataURL(file);\n              fileReader.onload = () => {\n                currentEditor.chain().insertContentAt(pos, {\n                  type: 'image',\n                  attrs: {\n                    src: fileReader.result\n                  }\n                }).focus().run();\n              };\n            });\n          },\n          onPaste: (currentEditor, files) => {\n            files.forEach(file => {\n              const fileReader = new FileReader();\n              fileReader.readAsDataURL(file);\n              fileReader.onload = () => {\n                currentEditor.chain().insertContentAt(currentEditor.state.selection.anchor, {\n                  type: 'image',\n                  attrs: {\n                    src: fileReader.result\n                  }\n                }).focus().run();\n              };\n            });\n          }\n        })],\n        editorProps: {\n          attributes: {\n            class: 'markdown-body prose dark:prose-invert prose-sm sm:prose-base lg:prose-lg xl:prose-2xl m-5 focus:outline-none'\n          }\n        },\n        content: localStorage.getItem('editorContent') || `\n          <h1>\n            What’s the title?\n          </h1>\n          <p></p>\n          <p></p>\n          <p></p>\n          <p></p>\n          <p></p>\n        `,\n        onBlur: () => this.saveContent()\n      });\n    },\n    saveContent() {\n      const heading = this.editor.view.dom.querySelector('h1');\n      const content = this.editor.getHTML();\n      localStorage.setItem('editorContent', content);\n      this.$emit('notaAtualizada', content, heading);\n    },\n    loadContent() {\n      const savedContent = localStorage.getItem('editorContent');\n      if (savedContent) {\n        this.editor.commands.setContent(savedContent);\n      }\n    },\n    loadNoteContent(nota) {\n      this.editor.commands.setContent(nota.content);\n      localStorage.setItem('editorContent', nota.content);\n      console.log(nota.title);\n      if (nota.length === 0) {\n        localStorage.removeItem('editorContent');\n      }\n    }\n  },\n  beforeUnmount() {\n    this.editor.destroy();\n  }\n});","map":{"version":3,"names":["defineComponent","Editor","EditorContent","Document","Placeholder","Heading","StarterKit","Typography","Highlight","TaskItem","TaskList","FileHandler","Link","Image","CustomDocument","extend","content","components","data","editor","isFirstHeadingEditing","mounted","initializeEditor","loadContent","methods","ids","extensions","configure","document","heading","HTMLAttributes","class","placeholder","node","type","name","inline","allowBase64","allowedMimeTypes","onDrop","currentEditor","files","pos","forEach","file","fileReader","FileReader","readAsDataURL","onload","chain","insertContentAt","attrs","src","result","focus","run","onPaste","state","selection","anchor","editorProps","attributes","localStorage","getItem","onBlur","saveContent","view","dom","querySelector","getHTML","setItem","$emit","savedContent","commands","setContent","loadNoteContent","nota","console","log","title","length","removeItem","beforeUnmount","destroy"],"sources":["src/components/tiptap.vue"],"sourcesContent":["<template>\r\n    <editor-content :editor=\"editor\" />\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent } from 'vue'\r\nimport { Editor, EditorContent } from '@tiptap/vue-2'\r\nimport Document from '@tiptap/extension-document'\r\nimport Placeholder from '@tiptap/extension-placeholder'\r\nimport Heading from '@tiptap/extension-heading'\r\nimport StarterKit from '@tiptap/starter-kit'\r\nimport Typography from '@tiptap/extension-typography'\r\nimport Highlight from '@tiptap/extension-highlight'\r\nimport TaskItem from '@tiptap/extension-task-item'\r\nimport TaskList from '@tiptap/extension-task-list'\r\nimport FileHandler from '@tiptap-pro/extension-file-handler'\r\nimport Link from '@tiptap/extension-link'\r\nimport Image from '@tiptap/extension-image'\r\n\r\nconst CustomDocument = Document.extend({\r\n  content: 'heading block*'\r\n})\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    EditorContent\r\n  },\r\n\r\n  data () {\r\n    return {\r\n      editor: null,\r\n      isFirstHeadingEditing: false\r\n    }\r\n  },\r\n\r\n  mounted () {\r\n    this.initializeEditor()\r\n    this.loadContent()\r\n  },\r\n\r\n  methods: {\r\n    initializeEditor (ids) {\r\n      this.editor = new Editor({\r\n        extensions: [\r\n          CustomDocument,\r\n          StarterKit.configure({\r\n            document: false,\r\n            heading: false\r\n          }),\r\n          Heading.configure({\r\n            HTMLAttributes: {\r\n              class: 'first-heading'\r\n            }\r\n          }),\r\n          Placeholder.configure({\r\n            placeholder: ({ node }) => {\r\n              if (node.type.name === 'heading') {\r\n                return 'What’s the title?'\r\n              }\r\n\r\n              return 'Can you add some further context?'\r\n            }\r\n          }),\r\n          Typography,\r\n          Highlight,\r\n          TaskItem,\r\n          TaskList,\r\n          Link,\r\n          Image.configure({\r\n            inline: true,\r\n            allowBase64: true\r\n          }),\r\n          FileHandler.configure({\r\n            allowedMimeTypes: ['image/png', 'image/jpeg', 'image/gif', 'image/webp'],\r\n            onDrop: (currentEditor, files, pos) => {\r\n              files.forEach(file => {\r\n                const fileReader = new FileReader()\r\n                fileReader.readAsDataURL(file)\r\n                fileReader.onload = () => {\r\n                  currentEditor.chain().insertContentAt(pos, {\r\n                    type: 'image',\r\n                    attrs: {\r\n                      src: fileReader.result\r\n                    }\r\n                  }).focus().run()\r\n                }\r\n              })\r\n            },\r\n            onPaste: (currentEditor, files) => {\r\n              files.forEach(file => {\r\n                const fileReader = new FileReader()\r\n                fileReader.readAsDataURL(file)\r\n                fileReader.onload = () => {\r\n                  currentEditor.chain().insertContentAt(currentEditor.state.selection.anchor, {\r\n                    type: 'image',\r\n                    attrs: {\r\n                      src: fileReader.result\r\n                    }\r\n                  }).focus().run()\r\n                }\r\n              })\r\n            }\r\n          })\r\n        ],\r\n        editorProps: {\r\n          attributes: {\r\n            class: 'markdown-body prose dark:prose-invert prose-sm sm:prose-base lg:prose-lg xl:prose-2xl m-5 focus:outline-none'\r\n          }\r\n        },\r\n        content: localStorage.getItem('editorContent') || `\r\n          <h1>\r\n            What’s the title?\r\n          </h1>\r\n          <p></p>\r\n          <p></p>\r\n          <p></p>\r\n          <p></p>\r\n          <p></p>\r\n        `,\r\n        onBlur: () => this.saveContent()\r\n      })\r\n    },\r\n\r\n    saveContent () {\r\n      const heading = this.editor.view.dom.querySelector('h1')\r\n      const content = this.editor.getHTML()\r\n      localStorage.setItem('editorContent', content)\r\n      this.$emit('notaAtualizada', content, heading)\r\n    },\r\n\r\n    loadContent () {\r\n      const savedContent = localStorage.getItem('editorContent')\r\n      if (savedContent) {\r\n        this.editor.commands.setContent(savedContent)\r\n      }\r\n    },\r\n    loadNoteContent (nota) {\r\n      this.editor.commands.setContent(nota.content)\r\n      localStorage.setItem('editorContent', nota.content)\r\n      console.log(nota.title)\r\n      if (nota.length === 0) {\r\n        localStorage.removeItem('editorContent')\r\n      }\r\n    }\r\n  },\r\n\r\n  beforeUnmount () {\r\n    this.editor.destroy()\r\n  }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n/* Basic editor styles */\r\n.ProseMirror {\r\n  > * + * {\r\n    margin-top: 0.75em;\r\n  }\r\n}\r\n/* Basic editor styles */\r\n.tiptap {\r\n  > * + * {\r\n    margin-top: 0.75em;\r\n  }\r\n}\r\n\r\n/* Placeholder (at the top) */\r\n/*.tiptap p.is-editor-empty:first-child::before {\r\n  content: attr(data-placeholder);\r\n  float: left;\r\n  color: #ced4da;\r\n  pointer-events: none;\r\n  height: 0;\r\n}*/\r\n\r\n/* Placeholder (on every new line) */\r\n.tiptap .is-empty::before {\r\n  content: attr(data-placeholder);\r\n  float: left;\r\n  color: #ced4da;\r\n  pointer-events: none;\r\n  height: 0;\r\n}\r\n\r\nul[data-type=\"taskList\"] {\r\n  list-style: none;\r\n  padding: 0;\r\n\r\n  p {\r\n    margin: 0;\r\n  }\r\n\r\n  li {\r\n    display: flex;\r\n\r\n    > label {\r\n      flex: 0 0 auto;\r\n      margin-right: 0.5rem;\r\n      user-select: none;\r\n    }\r\n\r\n    > div {\r\n      flex: 1 1 auto;\r\n    }\r\n\r\n    ul li,\r\n    ol li {\r\n      display: list-item;\r\n    }\r\n\r\n    ul[data-type=\"taskList\"] > li {\r\n      display: flex;\r\n    }\r\n  }\r\n}\r\n.markdown-body {\r\n    box-sizing: border-box;\r\n    min-width: 200px;\r\n    max-width: 980px;\r\n    margin: 0 auto;\r\n    padding: 45px;\r\n  }\r\n  @media (max-width: 767px) {\r\n    .markdown-body {\r\n      padding: 15px;\r\n    }\r\n  }\r\n  div#app{\r\n    display: flex;\r\n    align-content: space-between;\r\n    justify-content: center;\r\n  }\r\n  body{\r\n    background-color: #0d1117;\r\n  }\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}