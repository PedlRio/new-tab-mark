{"ast":null,"code":"import { defineComponent } from 'vue';\nimport { Editor, EditorContent } from '@tiptap/vue-2';\nimport Document from '@tiptap/extension-document';\nimport Heading from '@tiptap/extension-heading';\nimport Paragraph from '@tiptap/extension-paragraph';\nimport Text from '@tiptap/extension-text';\nimport StarterKit from '@tiptap/starter-kit';\nimport Typography from '@tiptap/extension-typography';\nimport Highlight from '@tiptap/extension-highlight';\nimport TaskItem from '@tiptap/extension-task-item';\nimport TaskList from '@tiptap/extension-task-list';\nimport FileHandler from '@tiptap-pro/extension-file-handler';\nimport Image from '@tiptap/extension-image';\nexport default defineComponent({\n  components: {\n    EditorContent\n  },\n  data() {\n    return {\n      editor: null\n    };\n  },\n  mounted() {\n    this.initializeEditor();\n    this.loadContent();\n  },\n  methods: {\n    initializeEditor() {\n      this.editor = new Editor({\n        extensions: [Document, Heading, Paragraph, Text, StarterKit, Typography, Highlight, TaskItem, TaskList, Image, FileHandler.configure({\n          allowedMimeTypes: ['image/png', 'image/jpeg', 'image/gif', 'image/webp'],\n          onDrop: this.handleFileDrop,\n          onPaste: this.handleFilePaste\n        })],\n        content: localStorage.getItem('editorContent') || `\n                    <h1>\n                        Try to paste or drop files into this editor\n                    </h1>\n                    <p></p>\n                    <p></p>\n                    <p></p>\n                    <p></p>\n                    <p></p>\n                `,\n        onBlur: () => this.saveContent()\n      });\n    },\n    saveContent() {\n      const content = this.editor.getHTML();\n      localStorage.setItem('editorContent', content);\n    },\n    loadContent() {\n      const savedContent = localStorage.getItem('editorContent');\n      if (savedContent) {\n        this.editor.commands.setContent(savedContent);\n      }\n    },\n    handleFileDrop(currentEditor, files, pos) {\n      files.forEach(file => {\n        const fileReader = new FileReader();\n        fileReader.readAsDataURL(file);\n        fileReader.onload = () => {\n          const img = new Image(); // Use a new Image object from the DOM\n          img.onload = () => {\n            const canvas = document.createElement('canvas');\n            canvas.width = img.width;\n            canvas.height = img.height;\n            const ctx = canvas.getContext('2d');\n            ctx.drawImage(img, 0, 0);\n            const newDataURL = canvas.toDataURL('image/jpeg');\n            currentEditor.chain().insertContentAt(pos, {\n              type: 'image',\n              attrs: {\n                src: newDataURL\n              }\n            }).focus().run();\n          };\n          img.src = fileReader.result;\n        };\n      });\n    },\n    handleFilePaste(currentEditor, files) {\n      files.forEach(file => {\n        const fileReader = new FileReader();\n        fileReader.readAsDataURL(file);\n        fileReader.onload = () => {\n          const img = new Image(); // Use a new Image object from the DOM\n          img.onload = () => {\n            const canvas = document.createElement('canvas');\n            canvas.width = img.width;\n            canvas.height = img.height;\n            const ctx = canvas.getContext('2d');\n            ctx.drawImage(img, 0, 0);\n            const newDataURL = canvas.toDataURL('image/jpeg');\n            currentEditor.chain().insertContentAt(currentEditor.state.selection.anchor, {\n              type: 'image',\n              attrs: {\n                src: newDataURL\n              }\n            }).focus().run();\n          };\n          img.src = fileReader.result;\n        };\n      });\n    }\n  },\n  beforeUnmount() {\n    this.editor.destroy();\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}