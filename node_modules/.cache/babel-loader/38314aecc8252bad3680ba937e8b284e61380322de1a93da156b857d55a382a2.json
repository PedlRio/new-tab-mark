{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport Tiptap from '../components/tiptap.vue';\nimport SidebarMenu from '../components/sidebar.vue';\nimport '../../node_modules/github-markdown-css/github-markdown.css';\nexport default {\n  name: 'App',\n  components: {\n    SidebarMenu,\n    Tiptap\n  },\n  methods: {\n    criarEditorTiptap(novaNota) {\n      console.log(novaNota.id);\n      // Aqui você pode criar um novo editor Tiptap usando uma referência ao componente Tiptap\n      // Vou mostrar um exemplo básico aqui, você pode ajustá-lo conforme necessário\n      this.$refs.tiptapEditor.editor.destroy(); // Destruir editor existente (se houver)\n      this.$refs.tiptapEditor.initializeEditor(novaNota.id); // Inicializar novo editor\n      this.$refs.tiptapEditor.loadNoteContent(novaNota);\n    },\n    carregarNotaTiptap(nota) {\n      this.$refs.tiptapEditor.loadNoteContent(nota);\n    },\n    AtualziaNotaTiptap(content, heading) {\n      const ultimaNotaSelecionadaaaa = Number(localStorage.getItem('lastEditNote'));\n      const notas = JSON.parse(localStorage.getItem('notas')) || [];\n      const notaEncontrada = notas.find(nota => nota.id === ultimaNotaSelecionadaaaa);\n      notaEncontrada.content = content;\n      notaEncontrada.title = heading.innerText;\n      // Salvar a nota atualizada no localStorage ou realizar outras ações, se necessário\n      this.salvarNotaAtualizada(notaEncontrada);\n    },\n    salvarNotaAtualizada(nota) {\n      const notas = this.$refs.Sidebar.notas;\n      const index = notas.findIndex(n => n.id === nota.id);\n      if (index !== -1) {\n        notas.splice(index, 1, nota); // Substitui a nota na lista de notas pelo índice\n        localStorage.setItem('notas', JSON.stringify(notas)); // Salva a lista atualizada no localStorage\n      }\n    },\n\n    download() {\n      const textoParaDownload = this.$refs.tiptapEditor.editor.getHTML(); // Substitua isso pelo conteúdo da nota que deseja baixar\n      const textoTit = this.$refs.tiptapEditor.editor.view.dom.querySelector('h1').innerText;\n      const nomeDoArquivo = `${textoTit}.html`; // Nome do arquivo com extensão .txt\n\n      const element = document.createElement('a');\n      const file = new Blob([textoParaDownload], {\n        type: 'text/html'\n      });\n      element.href = URL.createObjectURL(file);\n      element.download = nomeDoArquivo;\n      document.body.appendChild(element);\n      element.click();\n      document.body.removeChild(element);\n    }\n  }\n};\ndocument.addEventListener('visibilitychange', () => {\n  if (!document.hidden) {\n    // A aba foi ativada novamente\n    // Execute ações que você deseja realizar quando a aba é ativada\n    console.log('A aba foi ativada novamente');\n    // Por exemplo, recarregue a página do seu plugin\n    chrome.tabs.query({\n      active: true,\n      currentWindow: true\n    }, tabs => {\n      if (tabs.length > 0) {\n        chrome.tabs.reload(tabs[0].id);\n      }\n    });\n  }\n});","map":{"version":3,"names":["Tiptap","SidebarMenu","name","components","methods","criarEditorTiptap","novaNota","console","log","id","$refs","tiptapEditor","editor","destroy","initializeEditor","loadNoteContent","carregarNotaTiptap","nota","AtualziaNotaTiptap","content","heading","ultimaNotaSelecionadaaaa","Number","localStorage","getItem","notas","JSON","parse","notaEncontrada","find","title","innerText","salvarNotaAtualizada","Sidebar","index","findIndex","n","splice","setItem","stringify","download","textoParaDownload","getHTML","textoTit","view","dom","querySelector","nomeDoArquivo","element","document","createElement","file","Blob","type","href","URL","createObjectURL","body","appendChild","click","removeChild","addEventListener","hidden","chrome","tabs","query","active","currentWindow","length","reload"],"sources":["src/override/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <SidebarMenu ref=\"Sidebar\" @baixaNota=\"download\" @notaSelecionada=\"carregarNotaTiptap\" @notaCriada=\"criarEditorTiptap\" /> <!-- Adiciona manipulador para o evento notaCriada -->\n    <Tiptap ref=\"tiptapEditor\" @notaAtualizada=\"AtualziaNotaTiptap\"/>\n  </div>\n</template>\n\n<script>\nimport Tiptap from '../components/tiptap.vue'\nimport SidebarMenu from '../components/sidebar.vue'\nimport '../../node_modules/github-markdown-css/github-markdown.css'\n\nexport default {\n  name: 'App',\n  components: {\n    SidebarMenu,\n    Tiptap\n  },\n  methods: {\n    criarEditorTiptap (novaNota) {\n      console.log(novaNota.id)\n      // Aqui você pode criar um novo editor Tiptap usando uma referência ao componente Tiptap\n      // Vou mostrar um exemplo básico aqui, você pode ajustá-lo conforme necessário\n      this.$refs.tiptapEditor.editor.destroy() // Destruir editor existente (se houver)\n      this.$refs.tiptapEditor.initializeEditor(novaNota.id) // Inicializar novo editor\n      this.$refs.tiptapEditor.loadNoteContent(novaNota)\n    },\n    carregarNotaTiptap (nota) {\n      this.$refs.tiptapEditor.loadNoteContent(nota)\n    },\n    AtualziaNotaTiptap (content, heading) {\n      const ultimaNotaSelecionadaaaa = Number(localStorage.getItem('lastEditNote'))\n      const notas = JSON.parse(localStorage.getItem('notas')) || []\n      const notaEncontrada = notas.find(nota => nota.id === ultimaNotaSelecionadaaaa)\n      notaEncontrada.content = content\n      notaEncontrada.title = heading.innerText\n      // Salvar a nota atualizada no localStorage ou realizar outras ações, se necessário\n      this.salvarNotaAtualizada(notaEncontrada)\n    },\n    salvarNotaAtualizada (nota) {\n      const notas = this.$refs.Sidebar.notas\n      const index = notas.findIndex(n => n.id === nota.id)\n      if (index !== -1) {\n        notas.splice(index, 1, nota) // Substitui a nota na lista de notas pelo índice\n        localStorage.setItem('notas', JSON.stringify(notas)) // Salva a lista atualizada no localStorage\n      }\n    },\n    download () {\n      const textoParaDownload = this.$refs.tiptapEditor.editor.getHTML() // Substitua isso pelo conteúdo da nota que deseja baixar\n      const textoTit = this.$refs.tiptapEditor.editor.view.dom.querySelector('h1').innerText\n      const nomeDoArquivo = `${textoTit}.html` // Nome do arquivo com extensão .txt\n\n      const element = document.createElement('a')\n      const file = new Blob([textoParaDownload], { type: 'text/html' })\n      element.href = URL.createObjectURL(file)\n      element.download = nomeDoArquivo\n      document.body.appendChild(element)\n      element.click()\n      document.body.removeChild(element)\n    }\n  }\n}\ndocument.addEventListener('visibilitychange', () => {\n  if (!document.hidden) {\n    // A aba foi ativada novamente\n    // Execute ações que você deseja realizar quando a aba é ativada\n    console.log('A aba foi ativada novamente')\n    // Por exemplo, recarregue a página do seu plugin\n    chrome.tabs.query({ active: true, currentWindow: true }, tabs => {\n      if (tabs.length > 0) {\n        chrome.tabs.reload(tabs[0].id)\n      }\n    })\n  }\n})\n</script>\n"],"mappings":";;;AAQA,OAAAA,MAAA;AACA,OAAAC,WAAA;AACA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAF,WAAA;IACAD;EACA;EACAI,OAAA;IACAC,kBAAAC,QAAA;MACAC,OAAA,CAAAC,GAAA,CAAAF,QAAA,CAAAG,EAAA;MACA;MACA;MACA,KAAAC,KAAA,CAAAC,YAAA,CAAAC,MAAA,CAAAC,OAAA;MACA,KAAAH,KAAA,CAAAC,YAAA,CAAAG,gBAAA,CAAAR,QAAA,CAAAG,EAAA;MACA,KAAAC,KAAA,CAAAC,YAAA,CAAAI,eAAA,CAAAT,QAAA;IACA;IACAU,mBAAAC,IAAA;MACA,KAAAP,KAAA,CAAAC,YAAA,CAAAI,eAAA,CAAAE,IAAA;IACA;IACAC,mBAAAC,OAAA,EAAAC,OAAA;MACA,MAAAC,wBAAA,GAAAC,MAAA,CAAAC,YAAA,CAAAC,OAAA;MACA,MAAAC,KAAA,GAAAC,IAAA,CAAAC,KAAA,CAAAJ,YAAA,CAAAC,OAAA;MACA,MAAAI,cAAA,GAAAH,KAAA,CAAAI,IAAA,CAAAZ,IAAA,IAAAA,IAAA,CAAAR,EAAA,KAAAY,wBAAA;MACAO,cAAA,CAAAT,OAAA,GAAAA,OAAA;MACAS,cAAA,CAAAE,KAAA,GAAAV,OAAA,CAAAW,SAAA;MACA;MACA,KAAAC,oBAAA,CAAAJ,cAAA;IACA;IACAI,qBAAAf,IAAA;MACA,MAAAQ,KAAA,QAAAf,KAAA,CAAAuB,OAAA,CAAAR,KAAA;MACA,MAAAS,KAAA,GAAAT,KAAA,CAAAU,SAAA,CAAAC,CAAA,IAAAA,CAAA,CAAA3B,EAAA,KAAAQ,IAAA,CAAAR,EAAA;MACA,IAAAyB,KAAA;QACAT,KAAA,CAAAY,MAAA,CAAAH,KAAA,KAAAjB,IAAA;QACAM,YAAA,CAAAe,OAAA,UAAAZ,IAAA,CAAAa,SAAA,CAAAd,KAAA;MACA;IACA;;IACAe,SAAA;MACA,MAAAC,iBAAA,QAAA/B,KAAA,CAAAC,YAAA,CAAAC,MAAA,CAAA8B,OAAA;MACA,MAAAC,QAAA,QAAAjC,KAAA,CAAAC,YAAA,CAAAC,MAAA,CAAAgC,IAAA,CAAAC,GAAA,CAAAC,aAAA,OAAAf,SAAA;MACA,MAAAgB,aAAA,MAAAJ,QAAA;;MAEA,MAAAK,OAAA,GAAAC,QAAA,CAAAC,aAAA;MACA,MAAAC,IAAA,OAAAC,IAAA,EAAAX,iBAAA;QAAAY,IAAA;MAAA;MACAL,OAAA,CAAAM,IAAA,GAAAC,GAAA,CAAAC,eAAA,CAAAL,IAAA;MACAH,OAAA,CAAAR,QAAA,GAAAO,aAAA;MACAE,QAAA,CAAAQ,IAAA,CAAAC,WAAA,CAAAV,OAAA;MACAA,OAAA,CAAAW,KAAA;MACAV,QAAA,CAAAQ,IAAA,CAAAG,WAAA,CAAAZ,OAAA;IACA;EACA;AACA;AACAC,QAAA,CAAAY,gBAAA;EACA,KAAAZ,QAAA,CAAAa,MAAA;IACA;IACA;IACAvD,OAAA,CAAAC,GAAA;IACA;IACAuD,MAAA,CAAAC,IAAA,CAAAC,KAAA;MAAAC,MAAA;MAAAC,aAAA;IAAA,GAAAH,IAAA;MACA,IAAAA,IAAA,CAAAI,MAAA;QACAL,MAAA,CAAAC,IAAA,CAAAK,MAAA,CAAAL,IAAA,IAAAvD,EAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}