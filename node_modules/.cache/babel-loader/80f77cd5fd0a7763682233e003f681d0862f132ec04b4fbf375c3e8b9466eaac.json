{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport Tiptap from '../components/tiptap.vue';\nimport SidebarMenu from '../components/sidebar.vue';\nexport default {\n  name: 'App',\n  components: {\n    SidebarMenu,\n    Tiptap\n  },\n  methods: {\n    criarEditorTiptap(novaNota) {\n      console.log(novaNota.id);\n      // Aqui você pode criar um novo editor Tiptap usando uma referência ao componente Tiptap\n      // Vou mostrar um exemplo básico aqui, você pode ajustá-lo conforme necessário\n      this.$refs.tiptapEditor.editor.destroy(); // Destruir editor existente (se houver)\n      this.$refs.tiptapEditor.initializeEditor(novaNota.id); // Inicializar novo editor\n      this.$refs.tiptapEditor.loadNoteContent(novaNota);\n    },\n    carregarNotaTiptap(nota) {\n      this.$refs.tiptapEditor.loadNoteContent(nota);\n    },\n    AtualziaNotaTiptap(content, heading) {\n      const ultimaNotaSelecionadaaaa = Number(localStorage.getItem('lastEditNote'));\n      const notas = JSON.parse(localStorage.getItem('notas')) || [];\n      const notaEncontrada = notas.find(nota => nota.id === ultimaNotaSelecionadaaaa);\n      notaEncontrada.content = content;\n      notaEncontrada.title = heading.innerText;\n      // Salvar a nota atualizada no localStorage ou realizar outras ações, se necessário\n      this.salvarNotaAtualizada(notaEncontrada);\n    },\n    salvarNotaAtualizada(nota) {\n      const notas = this.$refs.Sidebar.notas;\n      const index = notas.findIndex(n => n.id === nota.id);\n      if (index !== -1) {\n        notas.splice(index, 1, nota); // Substitui a nota na lista de notas pelo índice\n        localStorage.setItem('notas', JSON.stringify(notas)); // Salva a lista atualizada no localStorage\n      }\n    },\n\n    download() {\n      const textoParaDownload = this.$refs.tiptapEditor.editor.getHTML(); // Substitua isso pelo conteúdo da nota que deseja baixar\n      const textoTit = this.$refs.tiptapEditor.editor.view.dom.querySelector('h1').innerText;\n      const nomeDoArquivo = `${textoTit}.html`; // Nome do arquivo com extensão .txt\n\n      const element = document.createElement('a');\n      const file = new Blob([textoParaDownload], {\n        type: 'text/html'\n      });\n      element.href = URL.createObjectURL(file);\n      element.download = nomeDoArquivo;\n      document.body.appendChild(element);\n      element.click();\n      document.body.removeChild(element);\n    }\n  }\n};\ndocument.addEventListener('visibilitychange', () => {\n  if (!document.hidden) {\n    // A aba foi ativada novamente\n    // Execute ações que você deseja realizar quando a aba é ativada\n    console.log('A aba foi ativada novamente');\n    // Por exemplo, recarregue a página do seu plugin\n    chrome.tabs.query({\n      active: true,\n      currentWindow: true\n    }, tabs => {\n      if (tabs.length > 0) {\n        chrome.tabs.reload(tabs[0].id);\n      }\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}