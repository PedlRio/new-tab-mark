{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.oneOfProp = void 0;\nconst util_1 = require(\"../util\");\nconst validators_1 = require(\"../validators\");\n// inspired by https://github.com/dwightjack/vue-types/blob/4.1.1/src/validators/oneof.ts\nconst getOneOfType = values => {\n  const allowedTypes = [...new Set(values.flatMap(value => {\n    var _a;\n    if (value === null || value === undefined) {\n      return [];\n    }\n    return (\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      (_a = value.constructor) !== null && _a !== void 0 ? _a : []\n    );\n  }))];\n  if (allowedTypes.length === 0) {\n    return undefined;\n  }\n  if (allowedTypes.length === 1) {\n    return allowedTypes[0];\n  }\n  return allowedTypes;\n};\n/**\n * Allows any of the specified allowed values (validated at runtime and compile time).\n *\n * Type parameter `T` can be used to adjust the inferred type at compile time, this is usually not necessary.\n *\n * @param allowedValues - The allowed values.\n * @param validator - Optional function for further runtime validation; should return `undefined` if valid, or an error string if invalid.\n */\nconst oneOfProp = (allowedValues, validator) => (0, util_1.propOptionsGenerator)(getOneOfType(allowedValues), validator, (0, validators_1.isOneOf)(allowedValues));\nexports.oneOfProp = oneOfProp;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}