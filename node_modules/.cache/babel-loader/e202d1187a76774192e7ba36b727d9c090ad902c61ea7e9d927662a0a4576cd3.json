{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      notas: this.recuperarNotasSalvas() || [],\n      // Recupera notas salvas\n      ultimaNotaSelecionada: null\n    };\n  },\n  methods: {\n    criarNota() {\n      const novaNota = {\n        id: Date.now(),\n        // Gera um ID único usando timestamp\n        title: `Nota ${this.notas.length + 1}`,\n        content: `<h1>Nota ${this.notas.length + 1}</h1><p>Conteúdo da nova nota</p>`\n      };\n      this.notas.push(novaNota);\n      this.salvarNotas(this.notas, novaNota);\n      this.$emit('notaCriada', novaNota);\n      this.ultimaNotaSelecionada = novaNota;\n      localStorage.setItem('lastEditNote', novaNota.id);\n    },\n    excluirNota(index) {\n      if (this.notas.length === 1) {\n        this.$emit('notaSelecionada', []);\n        this.notas.splice(index, 1);\n      } else if (this.notas.length - 1 === index) {\n        const nota = this.notas[this.notas.length - 2];\n        if (nota) {\n          this.$emit('notaSelecionada', nota);\n          this.notas.splice(index, 1); // Remove a nota pelo índice\n          // Faça algo com a nota encontrada\n        }\n      } else {\n        this.notas.splice(index, 1); // Remove a nota pelo índice\n      }\n\n      this.salvarNotas(this.notas); // Salva as notas após a exclusão\n    },\n\n    salvarNotas(notas) {\n      localStorage.setItem('notas', JSON.stringify(notas)); // Salva as notas no localStorage\n    },\n\n    recuperarNotasSalvas() {\n      const notasSalvas = localStorage.getItem('notas'); // Recupera as notas do localStorage\n      return notasSalvas ? JSON.parse(notasSalvas) : null; // Retorna as notas recuperadas (ou null se não houver notas)\n    },\n\n    selecionarNota(nota) {\n      this.$emit('notaSelecionada', nota); // Emitir evento 'notaSelecionada'\n      this.ultimaNotaSelecionada = nota;\n      localStorage.setItem('lastEditNote', this.ultimaNotaSelecionada.id);\n    },\n    downloadNota() {\n      this.$emit('baixaNota');\n    }\n  }\n};","map":{"version":3,"names":["data","notas","recuperarNotasSalvas","ultimaNotaSelecionada","methods","criarNota","novaNota","id","Date","now","title","length","content","push","salvarNotas","$emit","localStorage","setItem","excluirNota","index","splice","nota","JSON","stringify","notasSalvas","getItem","parse","selecionarNota","downloadNota"],"sources":["src/components/sidebar.vue"],"sourcesContent":["<template>\r\n  <aside class=\"sidebar\">\r\n    <div class=\"sidebar-header\">\r\n      <h2>Notas</h2>\r\n      <button @click=\"criarNota\">Criar Nota</button>\r\n      <button @click=\"downloadNota\">Download</button> <!-- Botão para download da nota -->\r\n    </div>\r\n    <ul class=\"notes-list\">\r\n      <li v-for=\"(nota, index) in notas\" :key=\"index\" @click=\"selecionarNota(nota)\">\r\n        {{ nota.title }}\r\n        <button @click=\"excluirNota(index)\">Excluir</button> <!-- Botão para excluir nota -->\r\n      </li>\r\n    </ul>\r\n  </aside>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data () {\r\n    return {\r\n      notas: this.recuperarNotasSalvas() || [], // Recupera notas salvas\r\n      ultimaNotaSelecionada: null\r\n    }\r\n  },\r\n  methods: {\r\n    criarNota () {\r\n      const novaNota = {\r\n        id: Date.now(), // Gera um ID único usando timestamp\r\n        title: `Nota ${this.notas.length + 1}`,\r\n        content: `<h1>Nota ${this.notas.length + 1}</h1><p>Conteúdo da nova nota</p>`\r\n      }\r\n      this.notas.push(novaNota)\r\n      this.salvarNotas(this.notas, novaNota)\r\n      this.$emit('notaCriada', novaNota)\r\n      this.ultimaNotaSelecionada = novaNota\r\n      localStorage.setItem('lastEditNote', novaNota.id)\r\n    },\r\n    excluirNota (index) {\r\n      if (this.notas.length === 1) {\r\n        this.$emit('notaSelecionada', [])\r\n        this.notas.splice(index, 1)\r\n      } else if (this.notas.length - 1 === index) {\r\n        const nota = this.notas[this.notas.length - 2]\r\n        if (nota) {\r\n          this.$emit('notaSelecionada', nota)\r\n          this.notas.splice(index, 1) // Remove a nota pelo índice\r\n        // Faça algo com a nota encontrada\r\n        }\r\n      } else {\r\n        this.notas.splice(index, 1) // Remove a nota pelo índice\r\n      }\r\n\r\n      this.salvarNotas(this.notas) // Salva as notas após a exclusão\r\n    },\r\n    salvarNotas (notas) {\r\n      localStorage.setItem('notas', JSON.stringify(notas)) // Salva as notas no localStorage\r\n    },\r\n    recuperarNotasSalvas () {\r\n      const notasSalvas = localStorage.getItem('notas') // Recupera as notas do localStorage\r\n      return notasSalvas ? JSON.parse(notasSalvas) : null // Retorna as notas recuperadas (ou null se não houver notas)\r\n    },\r\n    selecionarNota (nota) {\r\n      this.$emit('notaSelecionada', nota) // Emitir evento 'notaSelecionada'\r\n      this.ultimaNotaSelecionada = nota\r\n      localStorage.setItem('lastEditNote', this.ultimaNotaSelecionada.id)\r\n    },\r\n    downloadNota () {\r\n      this.$emit('baixaNota')\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* Estilos para o componente */\r\n.sidebar {\r\n  width: 300px;\r\n  height: 100%;\r\n  position: absolute;\r\n  left: 0;\r\n  background: #575757;\r\n  padding: 20px;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.sidebar-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.notes-list {\r\n  list-style: none;\r\n  padding: 0;\r\n  cursor: pointer;\r\n}\r\n\r\n.notes-list li {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 8px 0;\r\n  border-bottom: 1px solid #ccc;\r\n}\r\n\r\n.notes-list li:hover {\r\n  background-color: #e0e0e0;\r\n}\r\n</style>\r\n"],"mappings":";AAiBA;EACAA,KAAA;IACA;MACAC,KAAA,OAAAC,oBAAA;MAAA;MACAC,qBAAA;IACA;EACA;EACAC,OAAA;IACAC,UAAA;MACA,MAAAC,QAAA;QACAC,EAAA,EAAAC,IAAA,CAAAC,GAAA;QAAA;QACAC,KAAA,eAAAT,KAAA,CAAAU,MAAA;QACAC,OAAA,mBAAAX,KAAA,CAAAU,MAAA;MACA;MACA,KAAAV,KAAA,CAAAY,IAAA,CAAAP,QAAA;MACA,KAAAQ,WAAA,MAAAb,KAAA,EAAAK,QAAA;MACA,KAAAS,KAAA,eAAAT,QAAA;MACA,KAAAH,qBAAA,GAAAG,QAAA;MACAU,YAAA,CAAAC,OAAA,iBAAAX,QAAA,CAAAC,EAAA;IACA;IACAW,YAAAC,KAAA;MACA,SAAAlB,KAAA,CAAAU,MAAA;QACA,KAAAI,KAAA;QACA,KAAAd,KAAA,CAAAmB,MAAA,CAAAD,KAAA;MACA,gBAAAlB,KAAA,CAAAU,MAAA,SAAAQ,KAAA;QACA,MAAAE,IAAA,QAAApB,KAAA,MAAAA,KAAA,CAAAU,MAAA;QACA,IAAAU,IAAA;UACA,KAAAN,KAAA,oBAAAM,IAAA;UACA,KAAApB,KAAA,CAAAmB,MAAA,CAAAD,KAAA;UACA;QACA;MACA;QACA,KAAAlB,KAAA,CAAAmB,MAAA,CAAAD,KAAA;MACA;;MAEA,KAAAL,WAAA,MAAAb,KAAA;IACA;;IACAa,YAAAb,KAAA;MACAe,YAAA,CAAAC,OAAA,UAAAK,IAAA,CAAAC,SAAA,CAAAtB,KAAA;IACA;;IACAC,qBAAA;MACA,MAAAsB,WAAA,GAAAR,YAAA,CAAAS,OAAA;MACA,OAAAD,WAAA,GAAAF,IAAA,CAAAI,KAAA,CAAAF,WAAA;IACA;;IACAG,eAAAN,IAAA;MACA,KAAAN,KAAA,oBAAAM,IAAA;MACA,KAAAlB,qBAAA,GAAAkB,IAAA;MACAL,YAAA,CAAAC,OAAA,sBAAAd,qBAAA,CAAAI,EAAA;IACA;IACAqB,aAAA;MACA,KAAAb,KAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}