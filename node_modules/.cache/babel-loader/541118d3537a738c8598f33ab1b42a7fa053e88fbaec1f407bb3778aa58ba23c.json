{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      notas: this.recuperarNotasSalvas() || [],\n      // Recupera notas salvas\n      ultimaNotaSelecionada: null\n    };\n  },\n  methods: {\n    criarNota(content) {\n      let novoConteudo;\n      let h1Content;\n      if (content instanceof PointerEvent) {\n        // Se content é um objeto PointerEvent\n        h1Content = `Nota ${this.notas.length + 1}`;\n        novoConteudo = `<h1>Nota ${this.notas.length + 1}</h1><p>Conteúdo da nova nota</p>`;\n      } else {\n        novoConteudo = content;\n        const match = content.match(/<h1[^>]*>([^<]+)<\\/h1>/i);\n        h1Content = match ? match[1] : null;\n      }\n      const novaNota = {\n        id: Date.now(),\n        title: h1Content,\n        content: novoConteudo\n      };\n      this.notas.push(novaNota);\n      this.salvarNotas(this.notas, novaNota);\n      this.$emit('notaCriada', novaNota);\n      this.ultimaNotaSelecionada = novaNota;\n      localStorage.setItem('lastEditNote', novaNota.id);\n    },\n    excluirNota(index) {\n      if (this.notas.length === 1) {\n        this.$emit('notaSelecionada', []);\n        this.notas.splice(index, 1);\n      } else if (this.notas.length - 1 === index) {\n        const nota = this.notas[this.notas.length - 2];\n        if (nota) {\n          this.$emit('notaSelecionada', nota);\n          this.notas.splice(index, 1); // Remove a nota pelo índice\n          // Faça algo com a nota encontrada\n        }\n      } else {\n        this.notas.splice(index, 1); // Remove a nota pelo índice\n      }\n\n      this.salvarNotas(this.notas); // Salva as notas após a exclusão\n    },\n\n    salvarNotas(notas) {\n      localStorage.setItem('notas', JSON.stringify(notas)); // Salva as notas no localStorage\n    },\n\n    recuperarNotasSalvas() {\n      const notasSalvas = localStorage.getItem('notas'); // Recupera as notas do localStorage\n      return notasSalvas ? JSON.parse(notasSalvas) : null; // Retorna as notas recuperadas (ou null se não houver notas)\n    },\n\n    selecionarNota(nota) {\n      this.$emit('notaSelecionada', nota); // Emitir evento 'notaSelecionada'\n      this.ultimaNotaSelecionada = nota;\n      localStorage.setItem('lastEditNote', this.ultimaNotaSelecionada.id);\n    },\n    downloadNota() {\n      this.$emit('baixaNota');\n    },\n    importaNota() {\n      this.$emit('importaNota');\n    }\n  }\n};","map":{"version":3,"names":["data","notas","recuperarNotasSalvas","ultimaNotaSelecionada","methods","criarNota","content","novoConteudo","h1Content","PointerEvent","length","match","novaNota","id","Date","now","title","push","salvarNotas","$emit","localStorage","setItem","excluirNota","index","splice","nota","JSON","stringify","notasSalvas","getItem","parse","selecionarNota","downloadNota","importaNota"],"sources":["src/components/sidebar.vue"],"sourcesContent":["<template>\n  <aside class=\"sidebar\">\n      <div class=\"group\">\n        <div class=\"sidebar-header\">\n          <h2>Notas</h2>\n          <button @click=\"criarNota\">Criar Nota</button>\n        </div>\n        <ul class=\"notes-list\">\n          <li v-for=\"(nota, index) in notas\" :key=\"index\" @click=\"selecionarNota(nota)\">\n            {{ nota.title }}\n            <button @click=\"excluirNota(index)\">Excluir</button> <!-- Botão para excluir nota -->\n          </li>\n        </ul>\n        <button @click=\"downloadNota\">Exportar</button> <!-- Botão para download da nota -->\n        <button @click=\"importaNota\">importar</button> <!-- Botão para download da nota -->\n    </div>\n  </aside>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      notas: this.recuperarNotasSalvas() || [], // Recupera notas salvas\n      ultimaNotaSelecionada: null\n    }\n  },\n  methods: {\n    criarNota (content) {\n      let novoConteudo\n      let h1Content\n      if (content instanceof PointerEvent) {\n        // Se content é um objeto PointerEvent\n        h1Content = `Nota ${this.notas.length + 1}`\n        novoConteudo = `<h1>Nota ${this.notas.length + 1}</h1><p>Conteúdo da nova nota</p>`\n      } else {\n        novoConteudo = content\n        const match = content.match(/<h1[^>]*>([^<]+)<\\/h1>/i)\n        h1Content = match ? match[1] : null\n      }\n      const novaNota = {\n        id: Date.now(),\n        title: h1Content,\n        content: novoConteudo\n      }\n      this.notas.push(novaNota)\n      this.salvarNotas(this.notas, novaNota)\n      this.$emit('notaCriada', novaNota)\n      this.ultimaNotaSelecionada = novaNota\n      localStorage.setItem('lastEditNote', novaNota.id)\n    },\n    excluirNota (index) {\n      if (this.notas.length === 1) {\n        this.$emit('notaSelecionada', [])\n        this.notas.splice(index, 1)\n      } else if (this.notas.length - 1 === index) {\n        const nota = this.notas[this.notas.length - 2]\n        if (nota) {\n          this.$emit('notaSelecionada', nota)\n          this.notas.splice(index, 1) // Remove a nota pelo índice\n        // Faça algo com a nota encontrada\n        }\n      } else {\n        this.notas.splice(index, 1) // Remove a nota pelo índice\n      }\n\n      this.salvarNotas(this.notas) // Salva as notas após a exclusão\n    },\n    salvarNotas (notas) {\n      localStorage.setItem('notas', JSON.stringify(notas)) // Salva as notas no localStorage\n    },\n    recuperarNotasSalvas () {\n      const notasSalvas = localStorage.getItem('notas') // Recupera as notas do localStorage\n      return notasSalvas ? JSON.parse(notasSalvas) : null // Retorna as notas recuperadas (ou null se não houver notas)\n    },\n    selecionarNota (nota) {\n      this.$emit('notaSelecionada', nota) // Emitir evento 'notaSelecionada'\n      this.ultimaNotaSelecionada = nota\n      localStorage.setItem('lastEditNote', this.ultimaNotaSelecionada.id)\n    },\n    downloadNota () {\n      this.$emit('baixaNota')\n    },\n    importaNota () {\n      this.$emit('importaNota')\n    }\n  }\n}\n</script>\n\n<style scoped>\n/* Estilos para o componente */\n\n.sidebar-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.notes-list {\n  list-style: none;\n  padding: 0;\n  cursor: pointer;\n}\n\n.notes-list li {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 8px 0;\n  border-bottom: 1px solid #ccc;\n}\n\n.notes-list li:hover {\n  background-color: #e0e0e0;\n}\n\n.group{\n  padding: 45px;\n  min-height: 100vh;\n}\n</style>\n"],"mappings":";AAoBA;EACAA,KAAA;IACA;MACAC,KAAA,OAAAC,oBAAA;MAAA;MACAC,qBAAA;IACA;EACA;EACAC,OAAA;IACAC,UAAAC,OAAA;MACA,IAAAC,YAAA;MACA,IAAAC,SAAA;MACA,IAAAF,OAAA,YAAAG,YAAA;QACA;QACAD,SAAA,gBAAAP,KAAA,CAAAS,MAAA;QACAH,YAAA,oBAAAN,KAAA,CAAAS,MAAA;MACA;QACAH,YAAA,GAAAD,OAAA;QACA,MAAAK,KAAA,GAAAL,OAAA,CAAAK,KAAA;QACAH,SAAA,GAAAG,KAAA,GAAAA,KAAA;MACA;MACA,MAAAC,QAAA;QACAC,EAAA,EAAAC,IAAA,CAAAC,GAAA;QACAC,KAAA,EAAAR,SAAA;QACAF,OAAA,EAAAC;MACA;MACA,KAAAN,KAAA,CAAAgB,IAAA,CAAAL,QAAA;MACA,KAAAM,WAAA,MAAAjB,KAAA,EAAAW,QAAA;MACA,KAAAO,KAAA,eAAAP,QAAA;MACA,KAAAT,qBAAA,GAAAS,QAAA;MACAQ,YAAA,CAAAC,OAAA,iBAAAT,QAAA,CAAAC,EAAA;IACA;IACAS,YAAAC,KAAA;MACA,SAAAtB,KAAA,CAAAS,MAAA;QACA,KAAAS,KAAA;QACA,KAAAlB,KAAA,CAAAuB,MAAA,CAAAD,KAAA;MACA,gBAAAtB,KAAA,CAAAS,MAAA,SAAAa,KAAA;QACA,MAAAE,IAAA,QAAAxB,KAAA,MAAAA,KAAA,CAAAS,MAAA;QACA,IAAAe,IAAA;UACA,KAAAN,KAAA,oBAAAM,IAAA;UACA,KAAAxB,KAAA,CAAAuB,MAAA,CAAAD,KAAA;UACA;QACA;MACA;QACA,KAAAtB,KAAA,CAAAuB,MAAA,CAAAD,KAAA;MACA;;MAEA,KAAAL,WAAA,MAAAjB,KAAA;IACA;;IACAiB,YAAAjB,KAAA;MACAmB,YAAA,CAAAC,OAAA,UAAAK,IAAA,CAAAC,SAAA,CAAA1B,KAAA;IACA;;IACAC,qBAAA;MACA,MAAA0B,WAAA,GAAAR,YAAA,CAAAS,OAAA;MACA,OAAAD,WAAA,GAAAF,IAAA,CAAAI,KAAA,CAAAF,WAAA;IACA;;IACAG,eAAAN,IAAA;MACA,KAAAN,KAAA,oBAAAM,IAAA;MACA,KAAAtB,qBAAA,GAAAsB,IAAA;MACAL,YAAA,CAAAC,OAAA,sBAAAlB,qBAAA,CAAAU,EAAA;IACA;IACAmB,aAAA;MACA,KAAAb,KAAA;IACA;IACAc,YAAA;MACA,KAAAd,KAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}