{"ast":null,"code":"import { defineComponent } from 'vue';\nimport { Editor, EditorContent } from '@tiptap/vue-2';\nimport Document from '@tiptap/extension-document';\nimport Heading from '@tiptap/extension-heading';\nimport Paragraph from '@tiptap/extension-paragraph';\nimport Text from '@tiptap/extension-text';\nimport StarterKit from '@tiptap/starter-kit';\nimport Typography from '@tiptap/extension-typography';\nimport Highlight from '@tiptap/extension-highlight';\nimport TaskItem from '@tiptap/extension-task-item';\nimport TaskList from '@tiptap/extension-task-list';\nimport FileHandler from '@tiptap-pro/extension-file-handler';\nimport Image from '@tiptap/extension-image';\nexport default defineComponent({\n  components: {\n    EditorContent\n  },\n  data() {\n    return {\n      editor: null\n    };\n  },\n  mounted() {\n    this.initializeEditor();\n    this.loadContent();\n  },\n  methods: {\n    initializeEditor() {\n      this.editor = new Editor({\n        extensions: [Document, Heading, Paragraph, Text, StarterKit, Typography, Highlight, TaskItem, TaskList, Image, FileHandler.configure({\n          allowedMimeTypes: ['image/png', 'image/jpeg', 'image/gif', 'image/webp'],\n          onDrop: async (currentEditor, files, pos) => {\n            for (const file of files) {\n              const base64 = await this.fileToBase64(file); // Converte o arquivo para base64\n              this.saveImageToLocalStorage(base64); // Salva a imagem convertida no localStorage\n\n              currentEditor.chain().insertContentAt(pos, {\n                type: 'image',\n                attrs: {\n                  src: base64 // Define a imagem convertida como o src do elemento de imagem no editor\n                }\n              }).focus().run();\n            }\n          },\n          onPaste: async (currentEditor, files) => {\n            for (const file of files) {\n              const base64 = await this.fileToBase64(file); // Converte o arquivo para base64\n              this.saveImageToLocalStorage(base64); // Salva a imagem convertida no localStorage\n\n              currentEditor.chain().insertContentAt(currentEditor.state.selection.anchor, {\n                type: 'image',\n                attrs: {\n                  src: base64 // Define a imagem convertida como o src do elemento de imagem no editor\n                }\n              }).focus().run();\n            }\n          }\n        })],\n        content: localStorage.getItem('editorContent') || `\n          <h1>\n            Try to paste or drop files into this editor\n          </h1>\n          <p></p>\n          <p></p>\n          <p></p>\n          <p></p>\n          <p></p>\n        `,\n        onBlur: () => this.saveContent()\n      });\n    },\n    fileToBase64(file) {\n      return new Promise((resolve, reject) => {\n        const fileReader = new FileReader();\n        fileReader.readAsDataURL(file);\n        fileReader.onload = () => resolve(fileReader.result);\n        fileReader.onerror = error => reject(error);\n      });\n    },\n    saveImageToLocalStorage(base64Image) {\n      // Gere um ID único para cada imagem (você pode usar um método mais robusto para gerar um ID único)\n      const imageId = Date.now().toString();\n\n      // Salve a imagem no localStorage com o ID como chave\n      localStorage.setItem(`image_${imageId}`, base64Image);\n    },\n    saveContent() {\n      const content = this.editor.getHTML();\n      localStorage.setItem('editorContent', content);\n      this.$emit('notaAtualizada', content);\n    },\n    loadContent() {\n      const savedContent = localStorage.getItem('editorContent');\n      console.log(savedContent);\n      if (savedContent) {\n        this.editor.commands.setContent(savedContent);\n      }\n    },\n    loadNoteContent(nota) {\n      this.editor.commands.setContent(nota.content);\n    }\n  },\n  beforeUnmount() {\n    this.editor.destroy();\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}