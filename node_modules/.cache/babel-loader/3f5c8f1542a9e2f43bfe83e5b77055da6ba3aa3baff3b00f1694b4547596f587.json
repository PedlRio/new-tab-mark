{"ast":null,"code":"import { defineComponent } from 'vue';\nimport { Editor, EditorContent } from '@tiptap/vue-2';\nimport Document from '@tiptap/extension-document';\nimport Heading from '@tiptap/extension-heading';\nimport Paragraph from '@tiptap/extension-paragraph';\nimport Text from '@tiptap/extension-text';\nimport StarterKit from '@tiptap/starter-kit';\nimport Typography from '@tiptap/extension-typography';\nimport Highlight from '@tiptap/extension-highlight';\nimport TaskItem from '@tiptap/extension-task-item';\nimport TaskList from '@tiptap/extension-task-list';\nimport FileHandler from '@tiptap-pro/extension-file-handler';\nimport Image from '@tiptap/extension-image';\nexport default defineComponent({\n  components: {\n    EditorContent\n  },\n  data() {\n    return {\n      editor: null,\n      imageCache: {} // Objeto para armazenar imagens\n    };\n  },\n\n  mounted() {\n    this.initializeEditor();\n    this.loadContent();\n  },\n  methods: {\n    initializeEditor() {\n      this.editor = new Editor({\n        extensions: [Document, Heading, Paragraph, Text, StarterKit, Typography, Highlight, TaskItem, TaskList, Image, FileHandler.configure({\n          allowedMimeTypes: ['image/png', 'image/jpeg', 'image/gif', 'image/webp'],\n          onDrop: this.handleFileDrop,\n          onPaste: this.handleFilePaste\n        })],\n        content: localStorage.getItem('editorContent') || `\n          <h1>\n            Try to paste or drop files into this editor\n          </h1>\n          <p></p>\n          <p></p>\n          <p></p>\n          <p></p>\n          <p></p>\n        `,\n        onBlur: () => this.saveContent()\n      });\n    },\n    saveContent() {\n      const content = this.editor.getHTML();\n      localStorage.setItem('editorContent', content);\n    },\n    loadContent() {\n      const savedContent = localStorage.getItem('editorContent');\n      if (savedContent) {\n        this.editor.commands.setContent(savedContent);\n      }\n    },\n    handleFileDrop(currentEditor, files, pos) {\n      files.forEach(file => {\n        const reader = new FileReader();\n        reader.onload = event => {\n          const dataUrl = event.target.result;\n          // Salvar a imagem no cache\n          const id = this.generateImageId(); // Gerar um ID único\n          this.imageCache[id] = dataUrl; // Salvar no cache\n          currentEditor.chain().insertContentAt(pos, {\n            type: 'image',\n            attrs: {\n              src: id // Usar o ID da imagem\n            }\n          }).focus().run();\n        };\n        reader.readAsDataURL(file);\n      });\n    },\n    handleFilePaste(currentEditor, files) {\n      files.forEach(file => {\n        const reader = new FileReader();\n        reader.onload = event => {\n          const dataUrl = event.target.result;\n          // Salvar a imagem no cache\n          const id = this.generateImageId(); // Gerar um ID único\n          this.imageCache[id] = dataUrl; // Salvar no cache\n          currentEditor.chain().insertContentAt(currentEditor.state.selection.anchor, {\n            type: 'image',\n            attrs: {\n              src: id // Usar o ID da imagem\n            }\n          }).focus().run();\n        };\n        reader.readAsDataURL(file);\n      });\n    },\n    generateImageId() {\n      // Implementar lógica para gerar um ID único para cada imagem\n      // Por exemplo: return `img-${Math.random().toString(36).substr(2, 9)}`\n      // Isso é apenas um exemplo simples, ajuste conforme necessário\n      return `img-${Math.random().toString(36).substr(2, 9)}`;\n    }\n  },\n  beforeUnmount() {\n    this.editor.destroy();\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}