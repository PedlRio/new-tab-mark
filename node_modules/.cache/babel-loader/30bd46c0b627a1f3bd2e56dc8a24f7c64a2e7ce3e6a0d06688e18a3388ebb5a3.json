{"ast":null,"code":"import { defineComponent } from 'vue';\nimport { Editor, EditorContent } from '@tiptap/vue-2';\nimport Document from '@tiptap/extension-document';\nimport Placeholder from '@tiptap/extension-placeholder';\nimport Heading from '@tiptap/extension-heading';\nimport StarterKit from '@tiptap/starter-kit';\nimport Typography from '@tiptap/extension-typography';\nimport Highlight from '@tiptap/extension-highlight';\nimport TaskItem from '@tiptap/extension-task-item';\nimport TaskList from '@tiptap/extension-task-list';\nimport FileHandler from '@tiptap-pro/extension-file-handler';\nimport Link from '@tiptap/extension-link';\nimport Image from '@tiptap/extension-image';\nconst CustomDocument = Document.extend({\n  content: 'heading block*'\n});\nexport default defineComponent({\n  components: {\n    EditorContent\n  },\n  data() {\n    return {\n      editor: null,\n      isFirstHeadingEditing: false\n    };\n  },\n  mounted() {\n    this.initializeEditor();\n    this.loadContent();\n  },\n  methods: {\n    initializeEditor(ids) {\n      this.editor = new Editor({\n        extensions: [CustomDocument, StarterKit.configure({\n          document: false,\n          heading: false\n        }), Heading.configure({\n          HTMLAttributes: {\n            class: 'first-heading'\n          }\n        }), Placeholder.configure({\n          placeholder: ({\n            node\n          }) => {\n            if (node.type.name === 'heading') {\n              return 'What’s the title?';\n            }\n            return 'Can you add some further context?';\n          }\n        }), Typography, Highlight, TaskItem, TaskList, Link, Image.configure({\n          inline: true,\n          allowBase64: true\n        }), FileHandler.configure({\n          allowedMimeTypes: ['image/png', 'image/jpeg', 'image/gif', 'image/webp'],\n          onDrop: (currentEditor, files, pos) => {\n            files.forEach(file => {\n              const fileReader = new FileReader();\n              fileReader.readAsDataURL(file);\n              fileReader.onload = () => {\n                currentEditor.chain().insertContentAt(pos, {\n                  type: 'image',\n                  attrs: {\n                    src: fileReader.result\n                  }\n                }).focus().run();\n              };\n            });\n          },\n          onPaste: (currentEditor, files) => {\n            files.forEach(file => {\n              const fileReader = new FileReader();\n              fileReader.readAsDataURL(file);\n              fileReader.onload = () => {\n                currentEditor.chain().insertContentAt(currentEditor.state.selection.anchor, {\n                  type: 'image',\n                  attrs: {\n                    src: fileReader.result\n                  }\n                }).focus().run();\n              };\n            });\n          }\n        })],\n        editorProps: {\n          attributes: {\n            class: 'markdown-body prose dark:prose-invert prose-sm sm:prose-base lg:prose-lg xl:prose-2xl m-5 focus:outline-none'\n          }\n        },\n        content: localStorage.getItem('editorContent') || `\n          <h1>\n            Clique em \"Criar nota\" para começar\n          </h1>\n          <p></p>\n          <p></p>\n          <p></p>\n          <p></p>\n          <p></p>\n        `,\n        onBlur: () => this.saveContent()\n      });\n    },\n    saveContent() {\n      const heading = this.editor.view.dom.querySelector('h1');\n      const content = this.editor.getHTML();\n      localStorage.setItem('editorContent', content);\n      this.$emit('notaAtualizada', content, heading);\n    },\n    loadContent() {\n      const savedContent = localStorage.getItem('editorContent');\n      if (savedContent) {\n        this.editor.commands.setContent(savedContent);\n      }\n    },\n    loadNoteContent(nota) {\n      this.editor.commands.setContent(nota.content);\n      localStorage.setItem('editorContent', nota.content);\n      console.log(nota.title);\n      if (nota.length === 0) {\n        localStorage.removeItem('editorContent');\n      }\n    }\n  },\n  beforeUnmount() {\n    this.editor.destroy();\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}